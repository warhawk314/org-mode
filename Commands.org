* Notes

  Note that this org file is tracked in a local git repo, and has a remote github origin:
  https://www.github.com/warhawk314/org-mode.git
  
  git push origin master
  git pull origin

* Good Resources
** Org-Mode for GTD
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

* Basics

C-z
Toggle evil mode / Emacs 

META
META M stands for meta, a key that modern keyboards don’t possess but which is
mapped to alt on Windows and Linux and option on Macs. M-x runs the smex
command, which prompts you for the name of another command to be run.

C-g
C-g is bound to keyboard-quit (or an equivalent) by default. You use it, for
example, to exit the minibuffer (e.g. if you type M-: which is bound to
eval-expression and want to exit). You can replace C-g with <escape> for most
cases (see Using Escape to Exit the Minibuffer), but it is still useful to know
about it. If emacs freezes from a long-running command or infinite loop, you can
use C-g to cancel it.

* Setup
** Environment Search Path
   
   Evaluate (executable-find "find") to see where Emacs finds the find executable
   Evaluate (getenv "PATH") to see what PATH is setto in your Emacs environment.

   
   http://ergoemacs.org/emacs/emacs_env_var_paths.html
  
   The Windows System *PATH* tells your PC where it can find specific directories.
   This can be set in Emacs.
   
   Emacs's exec-path Emacs has a variable named *exec-path*. Its value is a list
   of dir paths. Emacs uses exec-path to find executable binary programs. For
   example, when spell checking, emacs will try to find ispell or aspell in
   exec-path. When you press Z to compress file in dired, emacs will try to find
   gzip or gunzip in exec-path. When you call any of emacs commands: {diff,
   grep, shell}, emacs will try to find the program in exec-path too. If emacs
   complains that it cannot find ispell, aspell, ftp, gzip, etc, the problem is
   probably with your exec-path. By default, emacs copies the value of (getenv
   "PATH") to exec-path. So, their values should be identical.
   
   Difference between exec-path and PATH The value of environment variable “PATH”
   is used by emacs when you are running a shell in emacs, similar to when you
   are using a shell in a terminal. The exec-path is used by emacs itself to find
   programs it needs for its features, such as spell checking, file compression,
   compiling, grep, diff, etc. If you did set the PATH env var within emacs, you
   probably also want to adjust your exec-path.
   
   e.g. add following to user-config in .spacemacs (note that we use forward slash).
   This worked (e.g. tested with (executable-find "find") found the correct *find* app.
   in git bin folder) 

   (setenv "PATH" (concat "C:/Users/Mark/Documents/Git/usr/bin:" (getenv "PATH")))
   (setq exec-path (append '("C:/Users/Mark/Documents/Git/usr/bin") exec-path))
** Searching Setup (Ripgrep)
 *Ripgrep*
 Download and copy to any folder the latest ripgrep for Windows (x86-64), mvsc build.

 https://github.com/BurntSushi/ripgrep/releases

 Update the variable helm-ag-base-command with location of binary. Set following in user-config:

 (setq helm-ag-base-command "C:\\Users\\Mark\\Documents\\ripgrep\\ripgrep-0.6.0-x86_64-pc-windows-msvc\\rg --vimgrep --no-heading")

 *Ag*
 Can also use Silver Searcher (Ag), but will be slower.

 (setq helm-ag-base-command "C:\\Users\\Mark\\Documents\\ag --vimgrep")

* Major Modes
** Projectile
*** Setup
    Had problems getting indexing to work on Windows. Seems that we have to use Native indexing (elisp) that can be slow.
    For Windows, set this in .spacemacs user-config. This should allow reliable indexing in Windows.

    (setq projectile-indexing-method 'native)
  
*** Create new Project and Enable Indexing
    See (projectile-indexing-method 'native) above.
    Create an empty .projectile file in top level folder, make sure file is saved.
    Open any file (including the empty file just created!)

    SPC p f

    This will index project and cache results (may take some time on windows if projectile-indexing-method is set to 'native 
    If for any reason need to rebuild cache, then reset the cache with:

    SPC p I
   
    and then redo SPC p f

** Org Mode Commands
*** Clock

    Org mode allows you to clock the time you spend on specific tasks in a project.
   
    C-c C-x C-i
    Start the clock on the current item (clock-in). This inserts the CLOCK keyword together with a timestamp. 
    When called with a C-u prefix argument, select the task from a list of recently clocked tasks.
    C-c C-x C-o
    Stop the clock (clock-out). This inserts another timestamp at the same location where the clock was last started. It also directly computes the resulting time in inserts it after the time range as ‘=> HH:MM’.
    C-c C-x C-e
    Update the effort estimate for the current clock task.
    C-c C-x C-q
    Cancel the current clock. This is useful if a clock was started by mistake, or if you ended up working on something else.
    C-c C-x C-j
    Jump to the entry that contains the currently running clock. With a C-u prefix arg, select the target task from a list of recently clocked tasks.
    C-c C-x C-r
    Insert a dynamic block containing a clock report as an Org-mode table into the current file. When the cursor is at an existing clock table, just update it.
   
    #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
    #+END: clocktable
   
    For details about how to customize this view, see the manual.
    C-c C-c
    Update dynamic block at point. The cursor needs to be in the #+BEGIN line of the dynamic block. 
    C-c C-c or C-c C-y     (org-evaluate-time-range)
    Recompute the time interval after changing one of the timestamps. 
    This is only necessary if you edit the timestamps directly. If you change them with S-<cursor> keys, the update is automatic. 

*** Clock Table (options)
We can set e.g *:block* to absolute or relative time, today, thisweek or thismonth, etc (see block: below).
For block of more than one day we can set interval using :step day/week 
Examples:
#+BEGIN: clocktable :maxlevel 2 :scope subtree :block today :stepskip0
#+END:
#+BEGIN: clocktable :maxlevel 2 :scope subtree :block thismonth :step day :stepskip0

Daily report: [2017-09-06 Mi]
| Headline                                     | Time   |      |
|----------------------------------------------+--------+------|
| *Total time*                                 | *3:32* |      |
|----------------------------------------------+--------+------|
| \_  GAIAMCS-1533: Is the DARC OK, current... |        | 3:32 |

Daily report: [2017-09-07 Do]
| Headline                                     | Time   |      |
|----------------------------------------------+--------+------|
| *Total time*                                 | *1:00* |      |
|----------------------------------------------+--------+------|
| \_  GAIAMCS-1533: Is the DARC OK, current... |        | 1:00 |

#+END:

block: The time block to consider.  This block is specified either
absolutely, or relative to the current time and may be any of these formats:
  2007-12-31    New year eve 2007
  2007-12       December 2007
  2007-W50      ISO-week 50 in 2007
  2007-Q2       2nd quarter in 2007
  2007          the year 2007
  today, yesterday, today-N          a relative day
  thisweek, lastweek, thisweek-N     a relative week
  thismonth, lastmonth, thismonth-N  a relative month
  thisyear, lastyear, thisyear-N     a relative year
  untilnow
http://orgmode.org/manual/The-clock-table.html

** Python
*** General
 Python layer: https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/python

 Setup Python environments using Conda, see [[conda_environment]] below for how to
 create Python environments. We then use the pyvenv package for environment
 selection. Spacemacs integration of virtual environments and virtualenvwrapper
 is provided by the pyvenv package. It provides the following keybindings:

 SPC m V a	activate a virtual environment in any directory
 SPC m V d	deactivate active virtual environment
 SPC m V w	work on virtual environment in WORKON_HOME

 The variable *WORKON_HOME* should be set in .spacemacs set to the 'envs' base folder containing the Python
 virtual environments, e.g.: 

   (setenv "WORKON_HOME" "/Users/mark/Documents/Python/anaconda/envs")
  
 This then provides a nice way of selecting the virtual python environment.

*** Conda (Anaconda)
**** Environments  
 #+NAME: conda_environment
 ROOT_DIR: The directory that Anaconda or Miniconda was installed into., e.g.:
 /Users/mark/Documents/Python/anaconda/

 Python environments are installed into envs folder. e.g.:
 /Users/mark/Documents/Python/anaconda/envs/snowflake

 *To check which Python versions are available to install, run:*
 conda search --full-name python 
 The --full-name option lists only the packages
 whose full name is exactly “python”. To list all packages whose names contain
 the text “python”, use conda search python.

 To create a new environment, issue:
 conda create --name snowflake python=3.6   (creates new env in /Users/mark/Documents/Python/anaconda/envs/snowflake)
 conda create --name snowflake python=3     (latest version of python if no dot specified)

 Display the environments that you have installed so far:
 conda info --envs
 Conda puts an asterisk (*) in front of the active environment.

 *To activate the new environment, run the appropriate command for your operating system:*
 Linux and macOS: source activate snowflakes
 Windows: activate snowflakes

 Change your path from the current environment back to the root:
 Linux, OS X: source deactivate
 Windows: deactivate
 TIP: When the environment is deactivated, its name is no longer shown in the prompt.

 Make a copy of the snowflakes environment by creating a clone of it called “flowers”:
 conda create --name flowers --clone snowflakes

 Delete the flowers environment:
 conda remove --name flowers --all

*** Linting

 Need to do 2 things to enable linting:

 (1) For linting in Python just enable the *syntax-checking* layer in
 dotspacemacs-configuration-layers. 
 https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bcheckers/syntax-checking

 The syntax-checking layer provides on the fly syntax checking using Flycheck
 (http://www.flycheck.org/en/latest). 

 Flycheck itself uses different linters (checkers) depending upon the buffer - hence next step.

 (2) *Note*_ You need to install syntax checking programs for the languages you’d like to use Flycheck with.
 depending upon the Python environment, may need to install e.g. Flake8 (using e.g. Conda),
 since PyFlake uses this tool.

 To find out which checker is being used by Flycheck for the buffer, issue SPC e v. 
 If everything is green, Flycheck will now start to check the buffer on the fly while you are editing. 

 To get extra info about a particular checker, issue SPC e h. This is useful for
 e.g. configuration of that particular checker.

**** Configuration
 http://www.flycheck.org/en/latest/user/syntax-checkers.html#flycheck-checker-config-files

**** Useful commands
     SPC e c	  clear errors
     SPC e h	  describe flycheck checker
     SPC e l	  display a list of all the errors
     SPC e L	  display a list of all the errors and focus the errors buffer
     SPC e e	  explain the error at point
     SPC e s	  set flycheck checker
     SPC e S	  set flycheck checker executable
     SPC e v	  verify flycheck setup
     SPC t s	  toggle flycheck
 
* General Commands

  meta-q (i.e. alt-q)
  Fill paragraph (reformat) to predefined column limit.
  To set the column at which lines of text are broken, use the set-fill-column command. Place the
  cursor at the column you want the line to end, and type *control-u control-x* (spacemacs: c-x f)
  and that column will become the fill column for the current buffer. Use
  fill-paragraph to refill the paragraph with the new fill column.

  VIM command gq will do the same thing.

  C-x C-q
  Toggle read-only status of buffer. Can also set following to disregard read-only status of buffers or characters:
  (setq inhibit-read-only t)
  
  SPC a p
  Searching using Ripgrep (via helm ag, hence the 'a' below)

  <column number> SPC SPC sort-numeric-fields
  Sort columns based on a column numeric values.
  Enter a prefix to the sort-numeric-fields command for the column number to sort on.
  e.g. type '2 SPC SPC sort-numeric-fields' to sort on 2nd column.
  Note this is generally how prefix are entered into commands - just type number first then issue command.
  Note there are several sort commands.

  SPC SPC reverse-region
  Reverse selected region. Useful for reversing sorting

  SPC h d b
  Help describe bindings of commands. Very useful.

  SPC t m c
  Display org clock on Mode line

  SPC t m t
  Display time on Mode line

  SPC SPC configuration-layer/update-packages
  Checks if any packages to be updated, and then updates if confirmed.
  See also paradox-list-packages

  paradox-list-packages
  Can use f u to filter for packages with updates.

  c-z
  Togggle evil-mode vs emacs-mode

  c-q
  Enter raw character (e.g. Tab)
  c-q <digits>
  Enter character based on its Octel code

  *Regular Expressions*
  General Rules: 
  - Need to quote, i.e. use \ before brackets.
  - For decimal digits use [0-9].
  - Saving parts into (), use \1, \2 etc to reference these
  See following example that uses quotes (\) and \1 \2 to swap two columns 
  of digits (this expression was created by me). Note the ? means none-greedy. 

  %s/\([0-9]+\).+?\([0-9]+\)/\2 help \1 

** Links

 If the link does not look like a URL, it is considered to be internal in the
 current file. The most important case is a link like ‘[[#my-custom-id]]’ which will
 link to the entry with the CUSTOM_ID property ‘my-custom-id’. You are
 responsible yourself to make sure these custom IDs are unique in a file.

 Links such as ‘[[My Target]]’ or ‘[[My Target][Find my target]]’ lead to a text search in the
 current file.

 The link can be followed with C-c C-o when the cursor is on the link, or with a
 mouse click (see Handling links). Links to custom IDs will point to the
 corresponding headline. The preferred match for a text link is a dedicated
 target: the same string in double angular brackets, like ‘<<My Target>>’.

 If no dedicated target exists, the link will then try to match the exact name of
 an element within the buffer. Naming is done with the #+NAME keyword, which has
 to be put in the line before the element it refers to, as in the following
 example

      #+NAME: My Target
