#+STARTUP: indent

* Notes

  Note that this org file is tracked in a local git repo, and has a remote github origin:
  https://www.github.com/warhawk314/org-mode.git
  
  git push origin master
  git pull origin master

* Good Resources
** Org-Mode for GTD
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

* Basics
 
Update spacemacs to latest development version

Save any files and close emacs (server and client)
goto C:\Users\mclements\AppData\Roaming\.emacs.d (this is original dir cloned from spacemacs "git clone https://github.com/syl20bnr/spacemacs .emacs.d")
Switch (if not already done) to development branch: 'git checkout develop'
Confirm (if not already done) on develop branch with 'git branch'
Get latest develope updates with: 'git pull --rebase'
Confirm last commits with 'git log' (compare to https://github.com/syl20bnr/spacemacs/develop) 
Restart emacs/server

C-z
Toggle evil mode / Emacs 

META
META M stands for meta, a key that modern keyboards don’t possess but which is
mapped to alt on Windows and Linux and option on Macs. M-x runs the smex
command, which prompts you for the name of another command to be run.

C-g
C-g is bound to keyboard-quit (or an equivalent) by default. You use it, for
example, to exit the minibuffer (e.g. if you type M-: which is bound to
eval-expression and want to exit). You can replace C-g with <escape> for most
cases (see Using Escape to Exit the Minibuffer), but it is still useful to know
about it. If emacs freezes from a long-running command or infinite loop, you can
use C-g to cancel it.

C-c C-f Follow Mode when using Helm

* Setup
** Optimised Emacs Binaries for Windows 10
http://emacsbinw64.sourceforge.net
E.g. “w64 25.2 O2 with Modules”

** Location of .emacs.d (home PC) 
C:\Users\Mark\AppData\Roaming\.emacs.d

** Download Adobe Source Code Pro Fonts and Install (Windows 10) 
Open the fonts directory with Win-r , shell:fonts

Goto the Adobe GitHub location:
https://github.com/adobe-fonts/source-code-pro/releases
Version I successfully used (July 19 2016)
https://github.com/adobe-fonts/source-code-pro/releases/tag/2.030R-ro%2F1.050R-it
Download “Source code” (zip), and unpack it
Goto OTF directory
Copy all font files to the fonts folder (see above, requires Admin) privilege.
	TTF: TrueType fonts
	OTF: OpenType fonts (slightly more advanced)

** Install Spacemacs 
Follow instructions, but is simply removing (or make backup) of .emacs.d (see above) then git clone of spacemacs to .emacs.d
Then start emacs as normal.
Install the normal Spacemacs (note the base version, not sripped down version).
https://simpletutorials.com/c/2758/How+to+Install+Spacemacs+on+Windows

** EMACS Server Setup on Windows 10 
In your Emacs/bin directory (where your Emacs binaries are) create a shortcut to runemacs.exe. You may right-click on file runemacs.exe and choose send-to desktop (create shortcut).
Right click on newly created shortcut and choose Properties. In Target put following: 

	"X:\path\to\emacs\bin\runemacs.exe" --daemon  (note the quotes disappeared for me after reopening the ShortCut Properties)

Close the properties dialog.
Press Win+r to open Run dialog and type shell:startup.

Copy your newly created link to Emacs server into opened directory. Emacs will start up automatically next time you
start the system. Double click on the shortcut to start Emacs server now if it is not already running (to test next
step).

*** To Start Emacs Client
In your Emacs/bin directory, create a new shortcut file to emacsclientw.exe. Open Properties for newly created shortcut and in Target type:

	X:\path\to\emacs\bin\emacsclientw.exe -n -c

In Start in field, type %Documents% or whatever your choice for default directory is. Close the Properties dialog and
rename your shortcut to just: emacs Drag your newly created shortcut to your startbar, taskbar, or desktop or wherever
you wish to have it.

OBS: No need to edit your .emacs file and add server line to it.
Note that in Windows Task Manager, you can see the Emacs Server process, and also any Emacs Clients.

Works on Windows 10, Emacs version “w64 25.2 O2 with Modules” (from http://emacsbinw64.sourceforge.net)
https://www.emacswiki.org/emacs/EmacsMsWindowsIntegration#toc7

*** Associate Windows File to Emacs Client
In the emacs bin folder, create a short cut to :\path\to\emacs\bin\emacsclientw.exe -n -c as described above. Name of short cut is not important.

Right Click Windows / Control Panel / Programs / Default Programs / Make a file type always open a specific program
Select file type, Select Change program, More Apps - select “GNU EmacsClient” if already in scroll box. 
If not in scroll box then scroll all way down and select “Look for another app on this PC”. 
Select the above short cut in the emacs bin folder to macsclientw.exe -n -c

*** Send to Context Menu
Press Win+r and in Run dialog type shell:sendto. 
Copy your newly created shortcut to the emacs client t(i.e. targeting …emacsclientw.exe -n -c) to the sendto folder that just opened. 
Call the short cut Emacs. This will create an entry in send to context menu so you can right click on any document and choose to open it in Emacs.

** Environment Search Path
   
   Evaluate (executable-find "find") to see where Emacs finds the find executable
   Evaluate (getenv "PATH") to see what PATH is setto in your Emacs environment.

   
   http://ergoemacs.org/emacs/emacs_env_var_paths.html
   
   The Windows System *PATH* tells your PC where it can find specific directories.
   This can be set in Emacs.
   
   Emacs's exec-path Emacs has a variable named *exec-path*. Its value is a list
   of dir paths. Emacs uses exec-path to find executable binary programs. For
   example, when spell checking, emacs will try to find ispell or aspell in
   exec-path. When you press Z to compress file in dired, emacs will try to find
   gzip or gunzip in exec-path. When you call any of emacs commands: {diff,
   grep, shell}, emacs will try to find the program in exec-path too. If emacs
   complains that it cannot find ispell, aspell, ftp, gzip, etc, the problem is
   probably with your exec-path. By default, emacs copies the value of (getenv
   "PATH") to exec-path. So, their values should be identical.
   
   Difference between exec-path and PATH The value of environment variable “PATH”
   is used by emacs when you are running a shell in emacs, similar to when you
   are using a shell in a terminal. The exec-path is used by emacs itself to find
   programs it needs for its features, such as spell checking, file compression,
   compiling, grep, diff, etc. If you did set the PATH env var within emacs, you
   probably also want to adjust your exec-path.
   
   e.g. add following to user-config in .spacemacs (note that we use forward slash).
   This worked (e.g. tested with (executable-find "find") found the correct *find* app.
   in git bin folder) 

   (setenv "PATH" (concat "C:/Users/Mark/Documents/Git/usr/bin:" (getenv "PATH")))
   (setq exec-path (append '("C:/Users/Mark/Documents/Git/usr/bin") exec-path))

   Note on my PC at work, git is installed at:
   C:\Program Files\Git\usr\bin
   C:\Program Files\Git\mingw64\bin

** Searching Setup (Ripgrep)
 
 See also: https://gist.github.com/pesterhazy/fabd629fbb89a6cd3d3b92246ff29779

 *Ag*
 Can also use Silver Searcher (Ag), but will be slower.

 (setq helm-ag-base-command "C:\\Users\\Mark\\Documents\\ag --vimgrep")

Ripgrep is a fast search tool like grep. It's mostly a drop-in replacement for ag, also know as the Silver Searcher.

helm-ag is a fantastic package for Emacs that allows you to display search results in a buffer. You can also jump to locations of matches. Despite the name, helm-ag works with ripgrep (rg) as well as with ag.

**** How

Download and copy to any folder the latest ripgrep.
For Windows use (x86-64), mvsc build.

https://github.com/BurntSushi/ripgrep/releases

Make Spacemacs use helm-project-do-ag directly when pressing SPC / without preselecting the symbol under the cursor.

Type SPC f e d to bring up ~/.spacemacs.

Add following two lines (also forces ripgrep as search tool)

(defun dotspacemacs/user-config ()
  ;; ....
 (setq helm-ag-base-command "/usr/local/Cellar/ripgrep-bin/0.7.1/bin/rg --vimgrep --no-heading --smart-case")
 (evil-leader/set-key "/" 'spacemacs/helm-project-do-ag)
  )
  
Note for windows:  (setq helm-ag-base-command "C:\\Users\\Mark\\Documents\\ripgrep\\ripgrep-0.6.0-x86_64-pc-windows-msvc\\rg --vimgrep --no-heading --smart-case")
  
**** Usage

SPC / should allow you to search in the current project.

You can prefix patterns with options

-G*.cljs -w time - search for the word "time" in all .cljs files

-tclojure time - search for "time" in all .{clj,cljs,cljc} files

uno\ due\ tre - search for the string "uno duo tre"

-C5 foo - search for "foo" but show 5 lines of context before and after the match

(?:^|[^\w-])time(?:[^\w-]|$) - search for lisp-word "time", i.e. search for the full word "time" while considering "-" to be a word characer=

* Major Modes
** Projectile
*** Setup
    Had problems getting indexing to work on Windows. Seems that we have to use Native indexing (elisp) that can be slow.
    For Windows, set this in .spacemacs user-config. This should allow reliable indexing in Windows.

    (setq projectile-indexing-method 'native)
  
*** Create new Project and Enable Indexing
    See (projectile-indexing-method 'native) above.
    Create an empty .projectile file in top level folder, make sure file is saved.
    Open any file (including the empty file just created!)

    SPC p f

    This will index project and cache results (may take some time on windows if projectile-indexing-method is set to 'native 
    If for any reason need to rebuild cache, then reset the cache with:

    SPC p I
   
    and then redo SPC p f

** Org Mode
*** Initialization
**** Location of org agenda files
(setq org-agenda-files '("C:\\Users\\mclements\\Documents\\Emacs\\GTD"))

**** Setup Capture Templates
(setq org-capture-templates
       '(("t" "Todo" entry (file+headline "~/Documents/Org/GTD.org" "Inbox")
          "* TODO %?\n  %i\n  %a")
         ("e" "Note" entry (file+headline "~/Documents/Org/GTD.org" "Inbox")
          "* %?\n  %i\n")
         ))

file+headline means for the Entry object - we must define two strings, the file to insert into, and the headline to file under in that file,
Note also the following template line starts with a * - i.e. normal syntax for org-mode top level heading.

**** Setup keys
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "C:\\Users\\mclements\\Documents\\Emacs\\GTD\\GTD.org")))

**** Setup TODO Task States
Org mode keeps track of the state that a task is in by applying a keyword to it,
usually something like “TODO” or “DONE.” The keyword appears at the beginning of
every task and Org lets you cycle through them easily to track task progress.
When you use a list of keywords that describe a progression of states, Org calls
that a “sequence.”

You can also configure multiple sequences of task states and use key bindings to
toggle between the sequences, but I haven’t found a use for that feature myself…
Yet.

The easiest way to set your default task sequence is by setting
org-todo-keywords, like this:

(setq org-todo-keywords
      '((sequence "Todo" "IN-PROGRESS" "WAITING" "|" "done" "CANCELED")))

The observant among you will notice three things about this configuration:

    It is a list of lists. This supports the multiple sequences I mentioned
    above. My sequence starts with the symbol “sequence.” That tells Org that
    the following items are a sequence of states rather than a list of task
    types. One of the items is a pipe. The pipe is optional, but if it is
    present, the task states following it will all be considered by Org to mean
    “complete.” I use it to mark tasks as DONE or CANCELED.

If you wish to configure your task states differently in each Org file, you can
use a line like this at the top (the syntax, including the pipe, is the same):

' #+TODO: TODO IN-PROGRESS WAITING | DONE CANCELED

Even more about Org states is covered in Workflow states in the Org manual.
*** Resources
http://spacemacs.org/layers/+emacs/org/README.html
https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html

*** Clock

    Org mode allows you to clock the time you spend on specific tasks in a project.
   
    C-c C-x C-i
    Start the clock on the current item (clock-in). This inserts the CLOCK keyword together with a timestamp. 
    When called with a C-u prefix argument, select the task from a list of recently clocked tasks.
    C-c C-x C-o
    Stop the clock (clock-out). This inserts another timestamp at the same location where the clock was last started. It also directly computes the resulting time in inserts it after the time range as ‘=> HH:MM’.
    C-c C-x C-e
    Update the effort estimate for the current clock task.
    C-c C-x C-q
    Cancel the current clock. This is useful if a clock was started by mistake, or if you ended up working on something else.
    C-c C-x C-j
    Jump to the entry that contains the currently running clock. With a C-u prefix arg, select the target task from a list of recently clocked tasks.
    C-c C-x C-r
    Insert a dynamic block containing a clock report as an Org-mode table into the current file. When the cursor is at an existing clock table, just update it.
   
    #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
    #+END: clocktable
   
    For details about how to customize this view, see the manual.
    C-c C-c
    Update dynamic block at point. The cursor needs to be in the #+BEGIN line of the dynamic block. 
    C-c C-c or C-c C-y     (org-evaluate-time-range)
    Recompute the time interval after changing one of the timestamps. 
    This is only necessary if you edit the timestamps directly. If you change them with S-<cursor> keys, the update is automatic. 

*** Clock Table (options)
C-c C-x C-r     (org-clock-report)
    Insert a dynamic block (see Dynamic blocks) containing a clock report as an
    Org mode table into the current file. When the cursor is at an existing
    clock table, just update it. When called with a prefix argument, jump to the
    first clock report in the current document and update it. The clock table
    always includes also trees with :ARCHIVE: tag.
C-c C-c or C-c C-x C-u     (org-dblock-update)
    Update dynamic block at point. The cursor needs to be in the #+BEGIN line of the dynamic block.
C-u C-c C-x C-u
    Update all dynamic blocks (see Dynamic blocks). This is useful if you have several clock table blocks in a buffer.
S-<left>
S-<right>     (org-clocktable-try-shift)
    Shift the current :block interval and update the table. The cursor needs to be in the #+BEGIN: clocktable line for this command. If :block is today, it will be shifted to today-1 etc. 

We can set e.g *:block* to absolute or relative time, today, thisweek or thismonth, etc (see block: below).
For block of more than one day we can set interval using :step day/week 
Examples:
#+BEGIN: clocktable :maxlevel 2 :scope subtree :block today :stepskip0
#+END:
#+BEGIN: clocktable :maxlevel 2 :scope subtree :block thismonth :step day :stepskip0

Daily report: [2017-09-06 Mi]
| Headline                                     | Time   |      |
|----------------------------------------------+--------+------|
| *Total time*                                 | *3:32* |      |
|----------------------------------------------+--------+------|
| \_  GAIAMCS-1533: Is the DARC OK, current... |        | 3:32 |

Daily report: [2017-09-07 Do]
| Headline                                     | Time   |      |
|----------------------------------------------+--------+------|
| *Total time*                                 | *1:00* |      |
|----------------------------------------------+--------+------|
| \_  GAIAMCS-1533: Is the DARC OK, current... |        | 1:00 |

#+END:

block: The time block to consider.  This block is specified either
absolutely, or relative to the current time and may be any of these formats:
  2007-12-31    New year eve 2007
  2007-12       December 2007
  2007-W50      ISO-week 50 in 2007
  2007-Q2       2nd quarter in 2007
  2007          the year 2007
  today, yesterday, today-N          a relative day
  thisweek, lastweek, thisweek-N     a relative week
  thismonth, lastmonth, thismonth-N  a relative month
  thisyear, lastyear, thisyear-N     a relative year
  untilnow
http://orgmode.org/manual/The-clock-table.html

*** Recurring Events
http://orgmode.org/manual/Repeated-tasks.html

 [2017-01-15 Sun] day
 [2017-01-15 Sun 12:19] time
 [2017-01-15 Sun 12:19-15:00] time period
 [2017-01-15 Sun]-[2017-01-17 Tue] date period
 [2017-01-15 Sun]--[2017-01-17 Tue] date period (alternative style)	  

 [2008-02-10 Sun ++1w]
 Marking this DONE will shift the date by at least one week,
 but also by as many weeks as it takes to get this date into
 the future.  However, it stays on a Sunday, even if you called
 and marked it done on Saturday.

 [2008-02-08 Fri 20:00 ++1d]
 Marking this DONE will shift the date by at least one day, and
 also by as many days as it takes to get the timestamp into the
 future.  Since there is a time in the timestamp, the next
 deadline in the future will be on today's date if you
 complete the task before 20:00.

 [2005-11-01 Tue .+1m]
 Marking this DONE will shift the date to one month after
 today.

However, for many standard recurring events (like +1w) and for everything advanced where I'd need sexp expressions,
I do prefer a different approach: M-x org-clone-subtree-with-time-shift 

*** Commands
Press t on a task to cycle its current state (e.g. from “TODO” to “IN-PROGRESS,” etc.)

S-<right>/<left>
    Select the following/preceding TODO state, similar to cycling.

C-c / t
    View TODO items in a sparse tree (see Sparse trees). Folds the buffer, but shows all TODO items and the headings hierarchy above them.

C-c a t
    Show the global TODO list. Collects the TODO items from all agenda files (see Agenda Views) into a single buffer. See Global TODO list, for more information. 
    Note: need to define folder of org files or individual org files, define variable org-agenda-files, e.g.:

    (setq org-agenda-files '("C:\\Users\\mclements\\Documents\\Emacs\\Projects_Org"))

    If you know a little Elisp you may notice that the variable is set to a
    list. If you store your task files in more than one location, you can supply
    each of those locations in the list (like '("/dir/one" "/dir/two") and so
    on).

    or 

    If you wish to configure your task states differently in each Org file, you can use a line like this at the top (the syntax, including the pipe, is the same):

    #+TODO: TODO IN-PROGRESS WAITING | DONE CANCELED

C-c C-z
    Add a time-stamped note to the LOGBOOK drawer. 
    See also (setq org-log-into-drawer t)

Shift Left/Right
    Toggle TODO status

*** File References 
[[]][] Normal form for full URL. First part URL, 2nd part name (optional). Allows spaces in URL. 
<<>> Text ID that can be looked up in a [[]] token. Used to skip to a place in local file.

URL Types (http://orgmode.org/manual/External-links.html):
- file+sys: use OS to open URL file
** Python
*** General
 Python layer: https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Blang/python

 Setup Python environments using Conda, see [[conda_environment]] below for how to
 create Python environments. We then use the pyvenv package for environment
 selection. Spacemacs integration of virtual environments and virtualenvwrapper
 is provided by the pyvenv package. It provides the following keybindings:

 SPC m V a	activate a virtual environment in any directory
 SPC m V d	deactivate active virtual environment
 SPC m V w	work on virtual environment in WORKON_HOME

 The variable *WORKON_HOME* should be set in .spacemacs set to the 'envs' base folder containing the Python
 virtual environments, e.g.: 

   (setenv "WORKON_HOME" "/Users/mark/Documents/Python/anaconda/envs")
  
 This then provides a nice way of selecting the virtual python environment.

*** Conda (Anaconda)
**** Environments  
 #+NAME: conda_environment
 ROOT_DIR: The directory that Anaconda or Miniconda was installed into., e.g.:
 /Users/mark/Documents/Python/anaconda/

 Python environments are installed into envs folder. e.g.:
 /Users/mark/Documents/Python/anaconda/envs/snowflake

 *To check which Python versions are available to install, run:*
 conda search --full-name python 
 The --full-name option lists only the packages
 whose full name is exactly “python”. To list all packages whose names contain
 the text “python”, use conda search python.

 To create a new environment, issue:
 conda create --name snowflake python=3.6   (creates new env in /Users/mark/Documents/Python/anaconda/envs/snowflake)
 conda create --name snowflake python=3     (latest version of python if no dot specified)

 Display the environments that you have installed so far:
 conda info --envs
 Conda puts an asterisk (*) in front of the active environment.

 *To activate the new environment, run the appropriate command for your operating system:*
 Linux and macOS: source activate snowflakes
 Windows: activate snowflakes

 Change your path from the current environment back to the root:
 Linux, OS X: source deactivate
 Windows: deactivate
 TIP: When the environment is deactivated, its name is no longer shown in the prompt.

 Make a copy of the snowflakes environment by creating a clone of it called “flowers”:
 conda create --name flowers --clone snowflakes

 Delete the flowers environment:
 conda remove --name flowers --all

*** Linting

 Need to do 2 things to enable linting:

 (1) For linting in Python just enable the *syntax-checking* layer in
 dotspacemacs-configuration-layers. 
 https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bcheckers/syntax-checking

 The syntax-checking layer provides on the fly syntax checking using Flycheck
 (http://www.flycheck.org/en/latest). 

 Flycheck itself uses different linters (checkers) depending upon the buffer - hence next step.

 (2) *Note*_ You need to install syntax checking programs for the languages you’d like to use Flycheck with.
 depending upon the Python environment, may need to install e.g. Flake8 (using e.g. Conda),
 since PyFlake uses this tool.

 To find out which checker is being used by Flycheck for the buffer, issue SPC e v. 
 If everything is green, Flycheck will now start to check the buffer on the fly while you are editing. 

 To get extra info about a particular checker, issue SPC e h. This is useful for
 e.g. configuration of that particular checker.

**** Configuration
 http://www.flycheck.org/en/latest/user/syntax-checkers.html#flycheck-checker-config-files

**** Useful commands
     SPC e c	  clear errors
     SPC e h	  describe flycheck checker
     SPC e l	  display a list of all the errors
     SPC e L	  display a list of all the errors and focus the errors buffer
     SPC e e	  explain the error at point
     SPC e s	  set flycheck checker
     SPC e S	  set flycheck checker executable
     SPC e v	  verify flycheck setup
     SPC t s	  toggle flycheck
** Eshell + Shell 
Use plink.exe (plink) within eshell (or emacs shell) to connect to other Linux
boxes instead of using ssh (for Windows). Note that plink.exe is a separate
program delivered with PuTTY. The path of PuTTY executables (including plink) should
be defined in the path variables for spacemacs startup (see .spacemacs).

Example: start eshell, then e.g. 'plink -l gedappl10' 

Note that normal completion does not seem to work, instead can use ALT-/

In eshell (EVIL):
- Insert - to type in remote shell commands
- ESC to enable normal buffer editing in shell output and moving around, also
  switch to other Windows (can also switch to another window with: C-x w
  <number>)

Aliases
The eshell aliases are stored in a file whose name is in the variable
eshell-aliases-file (this defaults to "c:/Users/mclements/AppData/Roaming/.emacs.d/eshell/alias").
Everytime alias is defined in the eshell then this file is automatically updated (i.e. aliases
are persistent).
e.g. alias ll 'ls -l $*' 

Just type alias to see all defined aliases.

Multiple Eshells 
Use the 'Universal Number' in Spacemacs, i.e. SPC u, then invoke a new eshell as
normal. This will create a new eshell instance.

Problems
Note that we cannt seem to get command history on local (remote) shell.
Maybe best to use shell (emacs). Alternatively, Tramp can also work with remote shells.

* General Commands

  meta-q (i.e. alt-q)
  Fill paragraph (reformat) to predefined column limit.
  To set the column at which lines of text are broken, use the set-fill-column command. Place the
  cursor at the column you want the line to end, and type *control-u control-x* (spacemacs: c-x f)
  and that column will become the fill column for the current buffer. Use
  fill-paragraph to refill the paragraph with the new fill column.

  VIM command gq will do the same thing.

  C-c C-f Follow Mode when using Helm

  C-x C-q
  Toggle read-only status of buffer. Can also set following to disregard read-only status of buffers or characters:
  (setq inhibit-read-only t)
  
  SPC a p
  Searching using Ripgrep (via helm ag, hence the 'a' below).

  <column number> SPC SPC sort-numeric-fields
  Sort columns based on a column numeric values.
  Enter a prefix to the sort-numeric-fields command for the column number to sort on.
  e.g. type '2 SPC SPC sort-numeric-fields' to sort on 2nd column.
  Note this is generally how prefix are entered into commands - just type number first then issue command.
  Note there are several sort commands.

  SPC SPC reverse-region
  Reverse selected region. Useful for reversing sorting.

  SPC h d b
  Help describe bindings of commands. Very useful.

  SPC t m c
  Display org clock on Mode line.

  SPC t m t
  Display time on Mode line
 
  SPC w b
  Switch to mini buffer. Used if Helm breaks when losing focus

  SPC SPC configuration-layer/update-packages
  Checks if any packages to be updated, and then updates if confirmed.
  See also paradox-list-packages

  paradox-list-packages
  Can use f u to filter for packages with updates.

  c-z
  Togggle evil-mode vs emacs-mode

  c-q
  Enter raw character (e.g. Tab)
  c-q <digits>
  Enter character based on its Octel code

  SPC x a
  General text alignment commands (works very well for e.g. alignment on decimal (use '.' option))

  SPC t w
  Toogle whitespace mode 

  *Regular Expressions*
  General Rules: 
  - Need to quote, i.e. use \ before brackets.
  - For decimal digits use [0-9].
  - Saving parts into (), use \1, \2 etc to reference these
  See following example that uses quotes (\) and \1 \2 to swap two columns 
  of digits (this expression was created by me). Note the ? means none-greedy. 

  %s/\([0-9]+\).+?\([0-9]+\)/\2 help \1 

  *Calculator*
  See https://github.com/SueDNymme/emacs-calc-qref/releases for very good cheat-sheets

  C-x * *
  SPC a c c
  Start calculator

  C-x * 0 (zero)
  calc-reset
  Reset calculator

  t N
  Current date/time on stack
  t N F
  Current date only on stack

  t P
  Extract date/time components
     n = 1,2,3 year, month, or day
     n = 4,5,6 hour, minute, or second
     n = 7 weekday: 0=Sunday ] 6=Saturday
     n = *8 day of year*
     n = 9 time, as HMS form P

** Links

 If the link does not look like a URL, it is considered to be internal in the
 current file. The most important case is a link like ‘[[#my-custom-id]]’ which will
 link to the entry with the CUSTOM_ID property ‘my-custom-id’. You are
 responsible yourself to make sure these custom IDs are unique in a file.

 Links such as ‘[[My Target]]’ or ‘[[My Target][Find my target]]’ lead to a text search in the
 current file.

 The link can be followed with C-c C-o when the cursor is on the link, or with a
 mouse click (see Handling links). Links to custom IDs will point to the
 corresponding headline. The preferred match for a text link is a dedicated
 target: the same string in double angular brackets, like ‘<<My Target>>’.

 If no dedicated target exists, the link will then try to match the exact name of
 an element within the buffer. Naming is done with the #+NAME keyword, which has
 to be put in the line before the element it refers to, as in the following
 example

      #+NAME: My Target
